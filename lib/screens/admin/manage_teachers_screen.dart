import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/teacher.dart';
import '../../providers/teacher_provider.dart';
import '../../constants.dart';

class ManageTeachersScreen extends StatefulWidget {
  static const routeName = '/manage-teachers';

  const ManageTeachersScreen({Key? key}) : super(key: key);

  @override
  State<ManageTeachersScreen> createState() => _ManageTeachersScreenState();
}

class _ManageTeachersScreenState extends State<ManageTeachersScreen> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final _formKey = GlobalKey<FormState>();
  
  // Form fields
  final _nameController = TextEditingController();
  final _qualificationController = TextEditingController();
  final _experienceController = TextEditingController();
  final _phoneController = TextEditingController();
  final _emailController = TextEditingController();
  final _departmentController = TextEditingController();
  final _designationController = TextEditingController();
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();
  String _selectedGender = 'Male';

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    // Fetch teachers when screen loads
    Future.microtask(() => 
      Provider.of<TeacherProvider>(context, listen: false).fetchTeachers()
    );
  }

  @override
  void dispose() {
    _tabController.dispose();
    _nameController.dispose();
    _qualificationController.dispose();
    _experienceController.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    _departmentController.dispose();
    _designationController.dispose();
    _usernameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  void _submitForm() {
    if (!_formKey.currentState!.validate()) return;

    final teacher = Teacher(
      id: DateTime.now().toString(), // This should be generated by the backend
      name: _nameController.text,
      gender: _selectedGender,
      qualification: _qualificationController.text,
      teachingExperience: _experienceController.text,
      phone: _phoneController.text,
      email: _emailController.text,
      department: _departmentController.text,
      designation: _designationController.text,
      username: _usernameController.text,
      password: _passwordController.text,
    );

    Provider.of<TeacherProvider>(context, listen: false).addTeacher(teacher);
    
    // Clear form
    _nameController.clear();
    _qualificationController.clear();
    _experienceController.clear();
    _phoneController.clear();
    _emailController.clear();
    _departmentController.clear();
    _designationController.clear();
    _usernameController.clear();
    _passwordController.clear();

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Teacher added successfully')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: kAdminPrimaryColor,
        title: const Text(
          'Manage Teachers',
          style: TextStyle(
            color: Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
        bottom: TabBar(
          controller: _tabController,
          labelColor: Colors.black,
          unselectedLabelColor: Colors.black54,
          indicatorColor: Colors.black,
          tabs: const [
            Tab(text: 'View Teachers'),
            Tab(text: 'Add Teacher'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildTeachersList(),
          _buildAddTeacherForm(),
        ],
      ),
    );
  }

  Widget _buildTeachersList() {
    return Consumer<TeacherProvider>(
      builder: (context, teacherProvider, child) {
        final teachers = teacherProvider.teachers;
        
        return Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  TextField(
                    decoration: const InputDecoration(
                      labelText: 'Search',
                      prefixIcon: Icon(Icons.search),
                      border: OutlineInputBorder(),
                    ),
                    onChanged: teacherProvider.setSearchQuery,
                  ),
                  const SizedBox(height: 8),
                  SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      children: [
                        DropdownButton<String>(
                          hint: const Text('Filter by Department'),
                          value: null,
                          items: const [
                            DropdownMenuItem(value: '', child: Text('All Departments')),
                            DropdownMenuItem(value: 'COMPS', child: Text('COMPS')),
                            DropdownMenuItem(value: 'EXTC', child: Text('EXTC')),
                            DropdownMenuItem(value: 'IT', child: Text('IT')),
                            DropdownMenuItem(value: 'CSE', child: Text('CSE')),
                          ],
                          onChanged: (value) => teacherProvider.setFilterDepartment(value ?? ''),
                        ),
                        const SizedBox(width: 16),
                        DropdownButton<String>(
                          hint: const Text('Filter by Gender'),
                          value: null,
                          items: const [
                            DropdownMenuItem(
                              value: '',
                              child: Text('All Genders'),
                            ),
                            DropdownMenuItem(
                              value: 'Male',
                              child: Text('Male'),
                            ),
                            DropdownMenuItem(
                              value: 'Female',
                              child: Text('Female'),
                            ),
                          ],
                          onChanged: (value) => teacherProvider.setFilterGender(value ?? ''),
                        ),
                        const SizedBox(width: 16),
                        TextButton.icon(
                          onPressed: teacherProvider.clearFilters,
                          icon: const Icon(Icons.clear),
                          label: const Text('Clear Filters'),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: teachers.length,
                itemBuilder: (context, index) {
                  final teacher = teachers[index];
                  return Card(
                    margin: const EdgeInsets.all(8.0),
                    child: ExpansionTile(
                      title: Text(teacher.name),
                      subtitle: Text('${teacher.designation} - ${teacher.department}'),
                      children: [
                        Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Gender: ${teacher.gender}'),
                              Text('Qualification: ${teacher.qualification}'),
                              Text('Experience: ${teacher.teachingExperience}'),
                              Text('Department: ${teacher.department}'),
                              Text('Phone: ${teacher.phone}'),
                              Text('Email: ${teacher.email}'),
                              Text('Username: ${teacher.username}'),
                              Text('Password: ${teacher.password}'),
                              const SizedBox(height: 8),
                              if (teacher.classTeacherInfo != null) ...[
                                const Text(
                                  'Class Teacher Information:',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                Text('Class: ${teacher.classTeacherInfo!.className}'),
                                Text('Subject: ${teacher.classTeacherInfo!.subject}'),
                                const SizedBox(height: 8),
                              ],
                              if (teacher.subjectTeachingInfo.isNotEmpty) ...[
                                const Text(
                                  'Subject Teaching Information:',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                ...teacher.subjectTeachingInfo.map((info) => 
                                  ListTile(
                                    title: Text(info.className),
                                    subtitle: Text(
                                      '${info.subject}${info.isPractical ? ' (Practical)' : ''}',
                                    ),
                                    dense: true,
                                  ),
                                ),
                              ],
                              ButtonBar(
                                children: [
                                  TextButton(
                                    onPressed: () {
                                      // Pre-fill the form with teacher data
                                      _nameController.text = teacher.name;
                                      _qualificationController.text = teacher.qualification;
                                      _experienceController.text = teacher.teachingExperience;
                                      _phoneController.text = teacher.phone;
                                      _emailController.text = teacher.email;
                                      _departmentController.text = teacher.department;
                                      _designationController.text = teacher.designation;
                                      _usernameController.text = teacher.username;
                                      _passwordController.text = teacher.password;
                                      setState(() {
                                        _selectedGender = teacher.gender;
                                      });
                                      _tabController.animateTo(1);
                                    },
                                    child: const Text('Edit'),
                                  ),
                                  TextButton(
                                    onPressed: () {
                                      showDialog(
                                        context: context,
                                        builder: (ctx) => AlertDialog(
                                          title: const Text('Delete Teacher'),
                                          content: const Text('Are you sure you want to delete this teacher?'),
                                          actions: [
                                            TextButton(
                                              onPressed: () => Navigator.of(ctx).pop(),
                                              child: const Text('Cancel'),
                                            ),
                                            TextButton(
                                              onPressed: () {
                                                teacherProvider.deleteTeacher(teacher.id);
                                                Navigator.of(ctx).pop();
                                              },
                                              child: const Text('Delete'),
                                            ),
                                          ],
                                        ),
                                      );
                                    },
                                    child: const Text('Delete'),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        );
      },
    );
  }

  Widget _buildAddTeacherForm() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'Name'),
              validator: (value) => value?.isEmpty ?? true ? 'Please enter name' : null,
            ),
            const SizedBox(height: 8),
            DropdownButtonFormField<String>(
              value: _selectedGender,
              decoration: const InputDecoration(labelText: 'Gender'),
              items: const [
                DropdownMenuItem(value: 'Male', child: Text('Male')),
                DropdownMenuItem(value: 'Female', child: Text('Female')),
              ],
              onChanged: (value) {
                setState(() {
                  _selectedGender = value!;
                });
              },
            ),
            TextFormField(
              controller: _qualificationController,
              decoration: const InputDecoration(labelText: 'Qualification'),
              validator: (value) => value?.isEmpty ?? true ? 'Please enter qualification' : null,
            ),
            TextFormField(
              controller: _experienceController,
              decoration: const InputDecoration(labelText: 'Teaching Experience'),
              validator: (value) => value?.isEmpty ?? true ? 'Please enter experience' : null,
            ),
            TextFormField(
              controller: _phoneController,
              decoration: const InputDecoration(labelText: 'Phone'),
              keyboardType: TextInputType.phone,
              validator: (value) => value?.isEmpty ?? true ? 'Please enter phone number' : null,
            ),
            TextFormField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Email'),
              keyboardType: TextInputType.emailAddress,
              validator: (value) => value?.isEmpty ?? true ? 'Please enter email' : null,
            ),
            DropdownButtonFormField<String>(
              value: _departmentController.text.isEmpty ? null : _departmentController.text,
              decoration: const InputDecoration(labelText: 'Department'),
              items: const [
                DropdownMenuItem(value: 'COMPS', child: Text('COMPS')),
                DropdownMenuItem(value: 'EXTC', child: Text('EXTC')),
                DropdownMenuItem(value: 'IT', child: Text('IT')),
                DropdownMenuItem(value: 'CSE', child: Text('CSE')),
              ],
              onChanged: (value) {
                setState(() {
                  _departmentController.text = value ?? '';
                });
              },
              validator: (value) => value == null || value.isEmpty ? 'Please select a department' : null,
            ),
            TextFormField(
              controller: _designationController,
              decoration: const InputDecoration(labelText: 'Designation'),
              validator: (value) => value?.isEmpty ?? true ? 'Please enter designation' : null,
            ),
            TextFormField(
              controller: _usernameController,
              decoration: const InputDecoration(labelText: 'Username'),
              validator: (value) => value?.isEmpty ?? true ? 'Please enter username' : null,
            ),
            TextFormField(
              controller: _passwordController,
              decoration: const InputDecoration(
                labelText: 'Password',
                suffixIcon: Icon(Icons.visibility),
              ),
              validator: (value) => value?.isEmpty ?? true ? 'Please enter password' : null,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _submitForm,
              style: ElevatedButton.styleFrom(
                backgroundColor: kAdminPrimaryColor,
                foregroundColor: Colors.black,
              ),
              child: const Text('Add Teacher'),
            ),
          ],
        ),
      ),
    );
  }
} 