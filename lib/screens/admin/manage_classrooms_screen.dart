import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/classroom.dart';
import '../../models/teacher.dart';
import '../../providers/classroom_provider.dart';
import '../../providers/teacher_provider.dart';
import '../../constants.dart';

class ManageClassroomsScreen extends StatefulWidget {
  static const routeName = '/manage-classrooms';

  const ManageClassroomsScreen({Key? key}) : super(key: key);

  @override
  State<ManageClassroomsScreen> createState() => _ManageClassroomsScreenState();
}

class _ManageClassroomsScreenState extends State<ManageClassroomsScreen> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final _formKey = GlobalKey<FormState>();
  
  // Form fields
  final _departmentController = TextEditingController();
  final _yearController = TextEditingController();
  final _divisionController = TextEditingController();
  
  // Selected teachers
  String? _selectedClassTeacherId;
  String? _selectedClassTeacherSubject;
  final List<Map<String, String>> _selectedSubjectTeachers = [];
  final List<Map<String, String>> _selectedPracticalTeachers = [];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    // Fetch data when screen loads
    Future.microtask(() {
      final classroomProvider = Provider.of<ClassroomProvider>(context, listen: false);
      final teacherProvider = Provider.of<TeacherProvider>(context, listen: false);
      classroomProvider.fetchClassrooms();
      teacherProvider.fetchTeachers();
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _departmentController.dispose();
    _yearController.dispose();
    _divisionController.dispose();
    super.dispose();
  }

  void _submitForm() {
    if (!_formKey.currentState!.validate()) return;

    if (_selectedClassTeacherId == null || _selectedClassTeacherSubject == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a class teacher and subject')),
      );
      return;
    }

    final teacherProvider = Provider.of<TeacherProvider>(context, listen: false);
    final classTeacher = teacherProvider.getTeacherById(_selectedClassTeacherId!);

    if (classTeacher == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Selected class teacher not found')),
      );
      return;
    }

    final classroom = Classroom(
      id: DateTime.now().toString(), // This should be generated by the backend
      department: _departmentController.text,
      year: _yearController.text,
      division: _divisionController.text,
      classTeacher: ClassTeacher(
        teacherId: classTeacher.id,
        teacherName: classTeacher.name,
        subject: _selectedClassTeacherSubject!,
      ),
      subjectTeachers: _selectedSubjectTeachers.map((st) => SubjectTeacher(
        teacherId: st['teacherId']!,
        teacherName: st['teacherName']!,
        subject: st['subject']!,
      )).toList(),
      practicalTeachers: _selectedPracticalTeachers.map((pt) => PracticalTeacher(
        teacherId: pt['teacherId']!,
        teacherName: pt['teacherName']!,
        subject: pt['subject']!,
      )).toList(),
      students: [],
    );

    try {
      Provider.of<ClassroomProvider>(context, listen: false).addClassroom(classroom);
      
      // Clear form
      _departmentController.clear();
      _yearController.clear();
      _divisionController.clear();
      setState(() {
        _selectedClassTeacherId = null;
        _selectedClassTeacherSubject = null;
        _selectedSubjectTeachers.clear();
        _selectedPracticalTeachers.clear();
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Classroom added successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(e.toString())),
      );
    }
  }

  Future<void> _showAddTeacherDialog(
    BuildContext context,
    List<Teacher> teachers,
    String title,
    String subjectLabel,
    Function(String teacherId, String teacherName, String subject) onAdd,
  ) async {
    String? selectedTeacherId;
    final subjectController = TextEditingController();

    return showDialog(
      context: context,
      builder: (ctx) => StatefulBuilder(
        builder: (context, setDialogState) {
          return AlertDialog(
            title: Text(title),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                DropdownButtonFormField<String>(
                  value: selectedTeacherId,
                  decoration: const InputDecoration(labelText: 'Select Teacher'),
                  items: teachers.map((teacher) => 
                    DropdownMenuItem(
                      value: teacher.id,
                      child: Text(teacher.name),
                    ),
                  ).toList(),
                  onChanged: (value) {
                    setDialogState(() {
                      selectedTeacherId = value;
                    });
                  },
                ),
                TextFormField(
                  controller: subjectController,
                  decoration: InputDecoration(labelText: subjectLabel),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Cancel'),
              ),
              TextButton(
                onPressed: () {
                  if (selectedTeacherId != null && subjectController.text.isNotEmpty) {
                    final teacher = teachers.firstWhere((t) => t.id == selectedTeacherId);
                    onAdd(teacher.id, teacher.name, subjectController.text);
                    Navigator.of(context).pop();
                  }
                },
                child: const Text('Add'),
              ),
            ],
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: kAdminPrimaryColor,
        title: const Text(
          'Manage Classrooms',
          style: TextStyle(
            color: Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
        bottom: TabBar(
          controller: _tabController,
          labelColor: Colors.black,
          unselectedLabelColor: Colors.black54,
          indicatorColor: Colors.black,
          tabs: const [
            Tab(text: 'View Classrooms'),
            Tab(text: 'Add Classroom'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildClassroomsList(),
          _buildAddClassroomForm(),
        ],
      ),
    );
  }

  Widget _buildClassroomsList() {
    return Consumer<ClassroomProvider>(
      builder: (context, classroomProvider, child) {
        final classrooms = classroomProvider.classrooms;
        
        return Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  TextField(
                    decoration: const InputDecoration(
                      labelText: 'Search',
                      prefixIcon: Icon(Icons.search),
                      border: OutlineInputBorder(),
                    ),
                    onChanged: classroomProvider.setSearchQuery,
                  ),
                  const SizedBox(height: 8),
                  SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      children: [
                        DropdownButton<String>(
                          hint: const Text('Filter by Department'),
                          value: null,
                          items: [
                            const DropdownMenuItem(value: '', child: Text('All Departments')),
                            const DropdownMenuItem(value: 'COMPS', child: Text('COMPS')),
                            const DropdownMenuItem(value: 'EXTC', child: Text('EXTC')),
                            const DropdownMenuItem(value: 'IT', child: Text('IT')),
                            const DropdownMenuItem(value: 'CSE', child: Text('CSE')),
                          ],
                          onChanged: (value) => classroomProvider.setFilterDepartment(value ?? ''),
                        ),
                        const SizedBox(width: 16),
                        DropdownButton<String>(
                          hint: const Text('Filter by Year'),
                          value: null,
                          items: [
                            const DropdownMenuItem(value: '', child: Text('All Years')),
                            const DropdownMenuItem(value: 'FE', child: Text('FE')),
                            const DropdownMenuItem(value: 'SE', child: Text('SE')),
                            const DropdownMenuItem(value: 'TE', child: Text('TE')),
                            const DropdownMenuItem(value: 'BE', child: Text('BE')),
                          ],
                          onChanged: (value) => classroomProvider.setFilterYear(value ?? ''),
                        ),
                        const SizedBox(width: 16),
                        TextButton.icon(
                          onPressed: classroomProvider.clearFilters,
                          icon: const Icon(Icons.clear),
                          label: const Text('Clear Filters'),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: classrooms.length,
                itemBuilder: (context, index) {
                  final classroom = classrooms[index];
                  return Card(
                    margin: const EdgeInsets.all(8.0),
                    child: ExpansionTile(
                      title: Text(classroom.className),
                      subtitle: Text('${classroom.students.length} Students'),
                      children: [
                        Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'Class Teacher:',
                                style: TextStyle(fontWeight: FontWeight.bold),
                              ),
                              ListTile(
                                title: Text(classroom.classTeacher.teacherName),
                                subtitle: Text('Subject: ${classroom.classTeacher.subject}'),
                                dense: true,
                              ),
                              const SizedBox(height: 8),
                              const Text(
                                'Subject Teachers:',
                                style: TextStyle(fontWeight: FontWeight.bold),
                              ),
                              ...classroom.subjectTeachers.map((teacher) => 
                                ListTile(
                                  title: Text(teacher.teacherName),
                                  subtitle: Text('Subject: ${teacher.subject}'),
                                  dense: true,
                                ),
                              ),
                              if (classroom.practicalTeachers.isNotEmpty) ...[
                                const SizedBox(height: 8),
                                const Text(
                                  'Practical Teachers:',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                ...classroom.practicalTeachers.map((teacher) => 
                                  ListTile(
                                    title: Text(teacher.teacherName),
                                    subtitle: Text('Subject: ${teacher.subject}'),
                                    dense: true,
                                  ),
                                ),
                              ],
                              const SizedBox(height: 8),
                              const Text(
                                'Students:',
                                style: TextStyle(fontWeight: FontWeight.bold),
                              ),
                              SingleChildScrollView(
                                scrollDirection: Axis.horizontal,
                                child: DataTable(
                                  columns: const [
                                    DataColumn(label: Text('College ID')),
                                    DataColumn(label: Text('Roll No')),
                                    DataColumn(label: Text('Name')),
                                    DataColumn(label: Text('Phone')),
                                  ],
                                  rows: classroom.students.map((student) => 
                                    DataRow(
                                      cells: [
                                        DataCell(Text(student.collegeId)),
                                        DataCell(Text(student.rollNumber)),
                                        DataCell(Text(student.name)),
                                        DataCell(Text(student.phone)),
                                      ],
                                    ),
                                  ).toList(),
                                ),
                              ),
                              ButtonBar(
                                children: [
                                  TextButton.icon(
                                    onPressed: () async {
                                      DateTimeRange? dateRange = await showDateRangePicker(
                                        context: context,
                                        firstDate: DateTime(2000),
                                        lastDate: DateTime.now(),
                                      );
                                      if (dateRange != null) {
                                        // TODO: Generate attendance report for the selected date range
                                      }
                                    },
                                    icon: const Icon(Icons.calendar_today),
                                    label: const Text('Attendance Report'),
                                  ),
                                  TextButton.icon(
                                    onPressed: () {
                                      // TODO: Display timetable in a tabular form
                                    },
                                    icon: const Icon(Icons.schedule),
                                    label: const Text('View Timetable'),
                                  ),
                                  TextButton.icon(
                                    onPressed: () {
                                      // TODO: Implement edit functionality
                                    },
                                    icon: const Icon(Icons.edit),
                                    label: const Text('Edit'),
                                  ),
                                  TextButton.icon(
                                    onPressed: () {
                                      showDialog(
                                        context: context,
                                        builder: (ctx) => AlertDialog(
                                          title: const Text('Delete Classroom'),
                                          content: const Text('Are you sure you want to delete this classroom?'),
                                          actions: [
                                            TextButton(
                                              onPressed: () => Navigator.of(ctx).pop(),
                                              child: const Text('Cancel'),
                                            ),
                                            TextButton(
                                              onPressed: () {
                                                classroomProvider.deleteClassroom(classroom.id);
                                                Navigator.of(ctx).pop();
                                              },
                                              child: const Text('Delete'),
                                            ),
                                          ],
                                        ),
                                      );
                                    },
                                    icon: const Icon(Icons.delete),
                                    label: const Text('Delete'),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        );
      },
    );
  }

  Widget _buildAddClassroomForm() {
    return Consumer2<ClassroomProvider, TeacherProvider>(
      builder: (context, classroomProvider, teacherProvider, child) {
        if (!classroomProvider.canAddClassroom) {
          return Center(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.warning, size: 64, color: Colors.orange),
                  const SizedBox(height: 16),
                  Text(
                    'Maximum classroom limit reached (${classroomProvider.totalClassrooms}/${classroomProvider.maxClassrooms})',
                    style: Theme.of(context).textTheme.titleLarge,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Please upgrade your subscription to add more classrooms',
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton.icon(
                    onPressed: () {
                      // TODO: Navigate to subscription upgrade screen
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: kAdminPrimaryColor,
                      foregroundColor: Colors.black,
                    ),
                    icon: const Icon(Icons.star),
                    label: const Text('Upgrade Now'),
                  ),
                ],
              ),
            ),
          );
        }

        final teachers = teacherProvider.teachers;

        return SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                DropdownButtonFormField<String>(
                  value: _departmentController.text.isEmpty ? null : _departmentController.text,
                  decoration: const InputDecoration(labelText: 'Department'),
                  items: const [
                    DropdownMenuItem(value: 'COMPS', child: Text('COMPS')),
                    DropdownMenuItem(value: 'EXTC', child: Text('EXTC')),
                    DropdownMenuItem(value: 'IT', child: Text('IT')),
                    DropdownMenuItem(value: 'CSE', child: Text('CSE')),
                  ],
                  onChanged: (value) {
                    setState(() {
                      _departmentController.text = value ?? '';
                    });
                  },
                  validator: (value) => value == null || value.isEmpty ? 'Please select a department' : null,
                ),
                DropdownButtonFormField<String>(
                  value: _yearController.text.isEmpty ? null : _yearController.text,
                  decoration: const InputDecoration(labelText: 'Year'),
                  items: const [
                    DropdownMenuItem(value: 'FE', child: Text('FE')),
                    DropdownMenuItem(value: 'SE', child: Text('SE')),
                    DropdownMenuItem(value: 'TE', child: Text('TE')),
                    DropdownMenuItem(value: 'BE', child: Text('BE')),
                  ],
                  onChanged: (value) {
                    setState(() {
                      _yearController.text = value ?? '';
                    });
                  },
                  validator: (value) => value == null || value.isEmpty ? 'Please select a year' : null,
                ),
                const SizedBox(height: 16),
                const Text(
                  'Class Teacher',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                DropdownButtonFormField<String>(
                  value: _selectedClassTeacherId,
                  decoration: const InputDecoration(labelText: 'Select Class Teacher'),
                  items: teachers.map((teacher) => 
                    DropdownMenuItem(
                      value: teacher.id,
                      child: Text(teacher.name),
                    ),
                  ).toList(),
                  onChanged: (value) {
                    setState(() {
                      _selectedClassTeacherId = value;
                      _selectedClassTeacherSubject = null;
                    });
                  },
                ),
                if (_selectedClassTeacherId != null)
                  TextFormField(
                    decoration: const InputDecoration(labelText: 'Subject'),
                    onChanged: (value) {
                      setState(() {
                        _selectedClassTeacherSubject = value;
                      });
                    },
                    validator: (value) => value?.isEmpty ?? true ? 'Please enter subject' : null,
                  ),
                const SizedBox(height: 16),
                const Text(
                  'Subject Teachers',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: _selectedSubjectTeachers.length + 1,
                  itemBuilder: (context, index) {
                    if (index == _selectedSubjectTeachers.length) {
                      return TextButton.icon(
                        onPressed: () {
                          _showAddTeacherDialog(
                            context,
                            teachers,
                            'Add Subject Teacher',
                            'Subject',
                            (teacherId, teacherName, subject) {
                              setState(() {
                                _selectedSubjectTeachers.add({
                                  'teacherId': teacherId,
                                  'teacherName': teacherName,
                                  'subject': subject,
                                });
                              });
                            },
                          );
                        },
                        icon: const Icon(Icons.add),
                        label: const Text('Add Subject Teacher'),
                      );
                    }

                    final teacher = _selectedSubjectTeachers[index];
                    return ListTile(
                      title: Text(teacher['teacherName']!),
                      subtitle: Text('Subject: ${teacher['subject']}'),
                      trailing: IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () {
                          setState(() {
                            _selectedSubjectTeachers.removeAt(index);
                          });
                        },
                      ),
                    );
                  },
                ),
                const SizedBox(height: 16),
                const Text(
                  'Practical Teachers',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: _selectedPracticalTeachers.length + 1,
                  itemBuilder: (context, index) {
                    if (index == _selectedPracticalTeachers.length) {
                      return TextButton.icon(
                        onPressed: () {
                          _showAddTeacherDialog(
                            context,
                            teachers,
                            'Add Practical Teacher',
                            'Practical Subject',
                            (teacherId, teacherName, subject) {
                              setState(() {
                                _selectedPracticalTeachers.add({
                                  'teacherId': teacherId,
                                  'teacherName': teacherName,
                                  'subject': subject,
                                });
                              });
                            },
                          );
                        },
                        icon: const Icon(Icons.add),
                        label: const Text('Add Practical Teacher'),
                      );
                    }

                    final teacher = _selectedPracticalTeachers[index];
                    return ListTile(
                      title: Text(teacher['teacherName']!),
                      subtitle: Text('Subject: ${teacher['subject']}'),
                      trailing: IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () {
                          setState(() {
                            _selectedPracticalTeachers.removeAt(index);
                          });
                        },
                      ),
                    );
                  },
                ),
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: _submitForm,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: kAdminPrimaryColor,
                    foregroundColor: Colors.black,
                  ),
                  child: const Text('Create Classroom'),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
} 