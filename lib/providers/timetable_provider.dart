import 'package:flutter/foundation.dart';
import '../models/timetable.dart';

class TimeTableProvider with ChangeNotifier {
  final Map<String, TimeTable> _timeTables = {}; // classroomId -> TimeTable

  TimeTable? getTimeTableForClassroom(String classroomId) {
    return _timeTables[classroomId];
  }

  bool hasTimeTable(String classroomId) {
    return _timeTables.containsKey(classroomId);
  }

  Future<void> createTimeTable({
    required String classroomId,
    required List<TimeTableDay> days,
    required List<TimeSlot> timeSlots,
  }) async {
    // Create empty cells
    final cells = List.generate(
      days.length,
      (i) => List.generate(
        timeSlots.length,
        (j) => TimeTableCell(subject: '', teacherName: ''),
      ),
    );

    final timeTable = TimeTable(
      id: DateTime.now().toString(), // Should be generated by backend
      classroomId: classroomId,
      days: days,
      timeSlots: timeSlots,
      cells: cells,
    );

    // TODO: Implement API call to create timetable
    _timeTables[classroomId] = timeTable;
    notifyListeners();
  }

  Future<void> updateTimeTableCell({
    required String classroomId,
    required int dayIndex,
    required int timeSlotIndex,
    required TimeTableCell cell,
  }) async {
    final timeTable = _timeTables[classroomId];
    if (timeTable == null) return;

    // Create new lists to maintain immutability
    final newCells = List<List<TimeTableCell>>.from(timeTable.cells);
    newCells[dayIndex] = List<TimeTableCell>.from(newCells[dayIndex]);
    newCells[dayIndex][timeSlotIndex] = cell;

    final updatedTimeTable = TimeTable(
      id: timeTable.id,
      classroomId: timeTable.classroomId,
      days: timeTable.days,
      timeSlots: timeTable.timeSlots,
      cells: newCells,
    );

    // TODO: Implement API call to update timetable
    _timeTables[classroomId] = updatedTimeTable;
    notifyListeners();
  }

  Future<void> deleteTimeTable(String classroomId) async {
    // TODO: Implement API call to delete timetable
    _timeTables.remove(classroomId);
    notifyListeners();
  }

  Future<void> fetchTimeTable(String classroomId) async {
    // TODO: Implement API call to fetch timetable
    // For now, using dummy data
    if (!_timeTables.containsKey(classroomId)) {
      final timeTable = TimeTable(
        id: '1',
        classroomId: classroomId,
        days: TimeTableDay.defaultDays,
        timeSlots: [
          TimeSlot(startTime: '09:00', endTime: '10:00'),
          TimeSlot(startTime: '10:00', endTime: '11:00'),
          TimeSlot(startTime: '11:15', endTime: '12:15'),
          TimeSlot(startTime: '12:15', endTime: '13:15'),
          TimeSlot(startTime: '14:00', endTime: '15:00'),
          TimeSlot(startTime: '15:00', endTime: '16:00'),
        ],
        cells: List.generate(
          6, // 6 days
          (i) => List.generate(
            6, // 6 time slots
            (j) => TimeTableCell(
              subject: 'Subject ${i + 1}-${j + 1}',
              teacherName: 'Teacher ${i + 1}-${j + 1}',
              isPractical: (i + j) % 3 == 0,
            ),
          ),
        ),
      );
      _timeTables[classroomId] = timeTable;
      notifyListeners();
    }
  }
} 